From 1230e18086c33e5ae8152ea8a18fd0562499555c Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Thu, 21 Sep 2023 01:05:06 -0700
Subject: [PATCH 01/87] gcc/d: add LoongArch64 support

---
 gcc/config.gcc                                |  1 +
 gcc/config/loongarch/loongarch-d.cc           | 82 +++++++++++++++++++
 gcc/config/loongarch/loongarch-d.h            | 26 ++++++
 gcc/config/loongarch/t-loongarch              |  4 +
 .../fail_compilation/reserved_version.d       |  7 ++
 .../reserved_version_switch.d                 | 12 +++
 libphobos/configure.tgt                       |  3 +
 libphobos/libdruntime/gcc/sections/elf.d      |  2 +
 libphobos/libdruntime/gcc/unwind/generic.d    |  1 +
 9 files changed, 138 insertions(+)
 create mode 100644 gcc/config/loongarch/loongarch-d.cc
 create mode 100644 gcc/config/loongarch/loongarch-d.h

diff --git a/gcc/config.gcc b/gcc/config.gcc
index 648b3dc2110..0fd7944880b 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -468,6 +468,7 @@ mips*-*-*)
 	;;
 loongarch*-*-*)
 	cpu_type=loongarch
+	d_target_objs="loongarch-d.o"
 	extra_headers="larchintrin.h"
 	extra_objs="loongarch-c.o loongarch-builtins.o loongarch-cpu.o loongarch-opts.o loongarch-def.o"
 	extra_gcc_objs="loongarch-driver.o loongarch-cpu.o loongarch-opts.o loongarch-def.o"
diff --git a/gcc/config/loongarch/loongarch-d.cc b/gcc/config/loongarch/loongarch-d.cc
new file mode 100644
index 00000000000..d7875079212
--- /dev/null
+++ b/gcc/config/loongarch/loongarch-d.cc
@@ -0,0 +1,82 @@
+/* Subroutines for the D front end on the LoongArch architecture.
+   Copyright (C) 2017-2023 Free Software Foundation, Inc.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+#define IN_TARGET_CODE 1
+
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tm_d.h"
+#include "d/d-target.h"
+#include "d/d-target-def.h"
+
+/* Implement TARGET_D_CPU_VERSIONS for LoongArch targets.  */
+
+void
+loongarch_d_target_versions (void)
+{
+  if (TARGET_64BIT)
+    d_add_builtin_version ("LoongArch64");
+  else
+    d_add_builtin_version ("LoongArch32");
+
+  if (TARGET_ABI_LP64)
+    d_add_builtin_version ("D_LP64");
+  else
+    d_add_builtin_version ("D_LP32");
+
+  if (TARGET_HARD_FLOAT_ABI)
+    {
+      d_add_builtin_version ("LoongArch_HardFloat");
+      d_add_builtin_version ("D_HardFloat");
+    }
+  else if (TARGET_SOFT_FLOAT_ABI)
+    {
+      d_add_builtin_version ("LoongArch_SoftFloat");
+      d_add_builtin_version ("D_SoftFloat");
+    }
+}
+
+/* Handle a call to `__traits(getTargetInfo, "floatAbi")'.  */
+
+static tree
+loongarch_d_handle_target_float_abi (void)
+{
+  const char *abi;
+
+  if (TARGET_HARD_FLOAT_ABI)
+    abi = "hard";
+  else if (TARGET_SOFT_FLOAT_ABI)
+    abi = "soft";
+  else
+    abi = "";
+
+  return build_string_literal (strlen (abi) + 1, abi);
+}
+
+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */
+
+void
+loongarch_d_register_target_info (void)
+{
+  const struct d_target_info_spec handlers[] = {
+    {"floatAbi", loongarch_d_handle_target_float_abi},
+    {NULL, NULL},
+  };
+
+  d_add_target_info_handlers (handlers);
+}
diff --git a/gcc/config/loongarch/loongarch-d.h b/gcc/config/loongarch/loongarch-d.h
new file mode 100644
index 00000000000..5ef7bdfa9a0
--- /dev/null
+++ b/gcc/config/loongarch/loongarch-d.h
@@ -0,0 +1,26 @@
+/* Definitions for the D front end on the LoongArch architecture.
+   Copyright (C) 2022-2023 Free Software Foundation, Inc.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+/* Defined in loongarch-d.cc  */
+extern void
+loongarch_d_target_versions (void);
+extern void
+loongarch_d_register_target_info (void);
+
+/* Target hooks for D language.  */
+#define TARGET_D_CPU_VERSIONS loongarch_d_target_versions
+#define TARGET_D_REGISTER_CPU_TARGET_INFO loongarch_d_register_target_info
diff --git a/gcc/config/loongarch/t-loongarch b/gcc/config/loongarch/t-loongarch
index 4ca08035bc8..db84fde4b14 100644
--- a/gcc/config/loongarch/t-loongarch
+++ b/gcc/config/loongarch/t-loongarch
@@ -59,6 +59,10 @@ loongarch-cpu.o: $(srcdir)/config/loongarch/loongarch-cpu.cc $(LA_STR_H)
 loongarch-def.o: $(srcdir)/config/loongarch/loongarch-def.c $(LA_STR_H)
 	$(CC) -c $(ALL_CFLAGS) $(INCLUDES) $<
 
+loongarch-d.o: $(srcdir)/config/loongarch/loongarch-d.cc
+	$(COMPILE) $<
+	$(POSTCOMPILE)
+
 $(srcdir)/config/loongarch/loongarch.opt: s-loongarch-opt ; @true
 s-loongarch-opt: $(srcdir)/config/loongarch/genopts/genstr.sh \
 	$(srcdir)/config/loongarch/genopts/loongarch.opt.in \
diff --git a/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d b/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d
index 29f96ece787..ca7c2cf3251 100644
--- a/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d
+++ b/gcc/testsuite/gdc.test/fail_compilation/reserved_version.d
@@ -198,6 +198,10 @@ version = SH;
 version = Alpha;
 version = Alpha_SoftFloat;
 version = Alpha_HardFloat;
+version = LoongArch32;
+version = LoongArch64;
+version = LoongArch_SoftFloat;
+version = LoongArch_HardFloat;
 version = LittleEndian;
 version = BigEndian;
 version = ELFv1;
@@ -313,6 +317,9 @@ debug = WASI;
 debug = Alpha;
 debug = Alpha_SoftFloat;
 debug = Alpha_HardFloat;
+debug = LoongArch64;
+debug = LoongArch64_SoftFloat;
+debug = LoongArch64_HardFloat;
 debug = LittleEndian;
 debug = BigEndian;
 debug = ELFv1;
diff --git a/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d b/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d
index f5f6b1c9acd..a1c8208626b 100644
--- a/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d
+++ b/gcc/testsuite/gdc.test/fail_compilation/reserved_version_switch.d
@@ -70,6 +70,10 @@
 // REQUIRED_ARGS: -version=Alpha
 // REQUIRED_ARGS: -version=Alpha_SoftFloat
 // REQUIRED_ARGS: -version=Alpha_HardFloat
+// REQUIRED_ARGS: -version=LoongArch32
+// REQUIRED_ARGS: -version=LoongArch64
+// REQUIRED_ARGS: -version=LoongArch_SoftFloat
+// REQUIRED_ARGS: -version=LoongArch_HardFloat
 // REQUIRED_ARGS: -version=LittleEndian
 // REQUIRED_ARGS: -version=BigEndian
 // REQUIRED_ARGS: -version=ELFv1
@@ -175,6 +179,10 @@
 // REQUIRED_ARGS: -debug=Alpha
 // REQUIRED_ARGS: -debug=Alpha_SoftFloat
 // REQUIRED_ARGS: -debug=Alpha_HardFloat
+// REQUIRED_ARGS: -debug=LoongArch32
+// REQUIRED_ARGS: -debug=LoongArch64
+// REQUIRED_ARGS: -debug=LoongArch_SoftFloat
+// REQUIRED_ARGS: -debug=LoongArch_HardFloat
 // REQUIRED_ARGS: -debug=LittleEndian
 // REQUIRED_ARGS: -debug=BigEndian
 // REQUIRED_ARGS: -debug=ELFv1
@@ -286,6 +294,10 @@ Error: version identifier `WASI` is reserved and cannot be set
 Error: version identifier `Alpha` is reserved and cannot be set
 Error: version identifier `Alpha_SoftFloat` is reserved and cannot be set
 Error: version identifier `Alpha_HardFloat` is reserved and cannot be set
+Error: version identifier `LoongArch32` is reserved and cannot be set
+Error: version identifier `LoongArch64` is reserved and cannot be set
+Error: version identifier `LoongArch_SoftFloat` is reserved and cannot be set
+Error: version identifier `LoongArch_HardFloat` is reserved and cannot be set
 Error: version identifier `LittleEndian` is reserved and cannot be set
 Error: version identifier `BigEndian` is reserved and cannot be set
 Error: version identifier `ELFv1` is reserved and cannot be set
diff --git a/libphobos/configure.tgt b/libphobos/configure.tgt
index 1f21f63620c..6e656c4a351 100644
--- a/libphobos/configure.tgt
+++ b/libphobos/configure.tgt
@@ -52,6 +52,9 @@ case "${target}" in
   s390*-linux*)
 	LIBPHOBOS_SUPPORTED=yes
 	;;
+  loongarch*-*-linux*)
+	LIBPHOBOS_SUPPORTED=yes
+	;;
   sparc*-*-solaris2.11*)
 	LIBPHOBOS_SUPPORTED=yes
 	;;
diff --git a/libphobos/libdruntime/gcc/sections/elf.d b/libphobos/libdruntime/gcc/sections/elf.d
index 0c7a771b167..3825f0652f9 100644
--- a/libphobos/libdruntime/gcc/sections/elf.d
+++ b/libphobos/libdruntime/gcc/sections/elf.d
@@ -1061,6 +1061,8 @@ else version (MIPS64)
     enum TLS_DTV_OFFSET = 0x8000;
 else version (IBMZ_Any)
     enum TLS_DTV_OFFSET = 0x0;
+else version (LoongArch64)
+    enum TLS_DTV_OFFSET = 0x0;
 else
     static assert( false, "Platform not supported." );
 
diff --git a/libphobos/libdruntime/gcc/unwind/generic.d b/libphobos/libdruntime/gcc/unwind/generic.d
index e4bbb4b01dc..2e74b6319bf 100644
--- a/libphobos/libdruntime/gcc/unwind/generic.d
+++ b/libphobos/libdruntime/gcc/unwind/generic.d
@@ -141,6 +141,7 @@ else version (SPARC64)  private enum __aligned__ = 16;
 else version (SystemZ)  private enum __aligned__ = 8;
 else version (X86)      private enum __aligned__ = 16;
 else version (X86_64)   private enum __aligned__ = 16;
+else version (LoongArch64) private enum __aligned__ = 16;
 else static assert( false, "Platform not supported.");
 
 align(__aligned__) struct _Unwind_Exception
-- 
2.43.0

